#include <stdio.h>

#define MAX_BLOCKS 10
#define MAX_PROCESSES 10

void worstFit(int blocks[], int m, int processes[], int n) {
    int allocation[n];
    for (int i = 0; i < n; i++) allocation[i] = -1;

    for (int i = 0; i < n; i++) {
        int worstIndex = -1;
        for (int j = 0; j < m; j++) {
            if (blocks[j] >= processes[i] && (worstIndex == -1 || blocks[j] > blocks[worstIndex]))
                worstIndex = j;
        }
        if (worstIndex != -1) {
            allocation[i] = worstIndex;
            blocks[worstIndex] -= processes[i];
        }
    }

    printf("\nProcess No.  Process Size  Block No.  Block Size Left\n");
    for (int i = 0; i < n; i++) {
        if (allocation[i] != -1)
            printf("%d            %d            %d          %d\n", i + 1, processes[i], allocation[i] + 1, blocks[allocation[i]]);
        else
            printf("%d            %d            Not Allocated\n", i + 1, processes[i]);
    }
}

int main() {
    int blocks[MAX_BLOCKS], processes[MAX_PROCESSES], m, n;
    printf("Enter number of blocks: ");
    scanf("%d", &m);
    printf("Enter block sizes: ");
    for (int i = 0; i < m; i++) scanf("%d", &blocks[i]);

    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter process sizes: ");
    for (int i = 0; i < n; i++) scanf("%d", &processes[i]);

    worstFit(blocks, m, processes, n);
    return 0;
}
